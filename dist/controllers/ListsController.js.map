{"version":3,"sources":["../../server/controllers/ListsController.js"],"names":["validator","require","onGetListsById","req","res","lists","Userlists","getListsById","params","id","status","json","success","error","onGetListsByUserId","getListsByUserId","userId","onGetAllLists","getAllLists","onCreateLists","validation","body","String","foundLists","createdLists","createUserLists","onUpdateListsByUserId","updateUserLists","message","onDeleteListsById","deletedLists","deleteListsById","deletedCount","onDeleteListsByUserId","deleteListsByUserId"],"mappings":"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","sourcesContent":["// libraries\nconst validator = require('validator');\n// models\nimport Userlists from '../models/Userlists.js';\n\n// Export User Controller\nexport default {\n  // Finds lists by their id and returns the lists on success\n  onGetListsById: async (req, res) => {\n    try {\n      const lists = await Userlists.getListsById(req.params.id);\n      return res.status(200).json({ success: true, lists });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Find lists with their userId and returns the lists if they exist,\n  // otherwise returns an error\n  onGetListsByUserId: async (req, res) => {\n    try {\n      // get the lists and return the lists if available\n      const lists = await Userlists.getListsByUserId(req.params.userId);\n      return res.status(200).json({ success: true, lists });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Returns a list of all lists\n  onGetAllLists: async (req, res) => {\n    try {\n      // finds all lists and returns them if there are any lists\n      const lists = await Userlists.getAllLists();\n      return res.status(200).json({ success: true, lists });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Tries to create lists, returns the lists on success,\n  // otherwise returns an error\n  onCreateLists: async (req, res) => {\n    try {\n      let validation = true;\n      const { userId, lists } = req.body;\n      // Validate the data from the request\n      if (!(typeof userId === 'string' || userId instanceof String)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Find if the lists already exists\n      const foundLists = await Userlists.getListsByUserId(userId);\n      // throw error if lists already exists\n      if ((foundLists !== null)) return res.status(500).json({\n        success: false,\n        error: 'There is already lists for this user.'\n      });\n      // create the lists\n      const createdLists = await Userlists.createUserLists(\n        userId,\n        lists\n      );\n      // return the lists and success message\n      return res.status(200).json({ success: true, createdLists });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Update the lists with the given userId and returns the success message on success,\n  // otherwise returns an error\n  onUpdateListsByUserId: async (req, res) => {\n    try {\n      await Userlists.updateUserLists(req.body.userId, req.body.lists);\n      return res.status(200).json({\n        success: true,\n        message: `Updated lists from user ${req.body.userId}.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the lists with the given id and returns the success message on success,\n  // otherwise returns an error\n  onDeleteListsById: async (req, res) => {\n    try {\n      const deletedLists = await Userlists.deleteListsById(req.params.id);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted ${deletedLists.deletedCount} lists.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the lists with the given userId and returns the success message on success,\n  // otherwise returns an error\n  onDeleteListsByUserId: async (req, res) => {\n    try {\n      const deletedLists = await Userlists.deleteListsByUserId(req.params.userId);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted ${deletedLists.deletedCount} lists.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n}\n"],"file":"ListsController.js"}