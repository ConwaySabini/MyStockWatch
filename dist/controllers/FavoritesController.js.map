{"version":3,"sources":["../../server/controllers/FavoritesController.js"],"names":["validator","require","onGetFavoritesById","req","res","favorites","UserFavorites","getFavoritesById","params","id","status","json","success","error","onGetFavoritesByUserId","getFavoritesByUserId","userId","onGetAllFavorites","getAllFavorites","onCreateFavorites","validation","body","String","foundFavorites","createdFavorites","createUserFavorites","onUpdateFavoritesByUserId","updateUserFavorites","message","onDeleteFavoritesById","deletedFavorites","deleteFavoritesById","deletedCount","onDeleteFavoritesByUserId","deleteFavoritesByUserId"],"mappings":"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","sourcesContent":["// libraries\nconst validator = require('validator');\n// models\nimport UserFavorites from '../models/UserFavorites.js';\n\n// Export Favorite Controller\nexport default {\n    // Finds favorites by their id and returns the favorites on success\n    onGetFavoritesById: async (req, res) => {\n        try {\n            const favorites = await UserFavorites.getFavoritesById(req.params.id);\n            return res.status(200).json({ success: true, favorites });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Find favorites with their userId and returns the favorites if they exist,\n    // otherwise returns an error\n    onGetFavoritesByUserId: async (req, res) => {\n        try {\n            // get the favorites and return the favorites if available\n            const favorites = await UserFavorites.getFavoritesByUserId(req.params.userId);\n            return res.status(200).json({ success: true, favorites });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Returns a list of all favorites\n    onGetAllFavorites: async (req, res) => {\n        try {\n            // finds all favorites and returns them if there are any favorites\n            const favorites = await UserFavorites.getAllFavorites();\n            return res.status(200).json({ success: true, favorites });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Tries to create favorites, returns the favorites on success,\n    // otherwise returns an error\n    onCreateFavorites: async (req, res) => {\n        try {\n            let validation = true;\n            const { userId, favorites } = req.body;\n            // Validate the data from the request\n            if (!(typeof userId === 'string' || userId instanceof String)) {\n                validation = false;\n            }\n            // throw error on validation failure\n            if (!validation) return res.status(400).json(validation);\n            // Find if the favorites already exists\n            const foundFavorites = await UserFavorites.getFavoritesByUserId(userId);\n            // throw error if favorites already exists\n            if ((foundFavorites !== null)) return res.status(500).json({\n                success: false,\n                error: 'There is already favorites for this user.'\n            });\n            // create the favorites\n            const createdFavorites = await UserFavorites.createUserFavorites(\n                userId,\n                favorites\n            );\n            // return the favorites and success message\n            return res.status(200).json({ success: true, createdFavorites });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Update the favorites with the given userId and returns the success message on success,\n    // otherwise returns an error\n    onUpdateFavoritesByUserId: async (req, res) => {\n        try {\n            await UserFavorites.updateUserFavorites(req.body.userId, req.body.favorites);\n            return res.status(200).json({\n                success: true,\n                message: `Updated favorites from user ${req.body.userId}.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Delete the favorites with the given id and returns the success message on success,\n    // otherwise returns an error\n    onDeleteFavoritesById: async (req, res) => {\n        try {\n            const deletedFavorites = await UserFavorites.deleteFavoritesById(req.params.id);\n            return res.status(200).json({\n                success: true,\n                message: `Deleted ${deletedFavorites.deletedCount} favorites.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Delete the favorites with the given userId and returns the success message on success,\n    // otherwise returns an error\n    onDeleteFavoritesByUserId: async (req, res) => {\n        try {\n            const deletedFavorites = await UserFavorites.deleteFavoritesByUserId(req.params.userId);\n            return res.status(200).json({\n                success: true,\n                message: `Deleted ${deletedFavorites.deletedCount} favorites.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n}\n"],"file":"FavoritesController.js"}