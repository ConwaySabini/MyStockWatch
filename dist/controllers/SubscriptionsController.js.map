{"version":3,"sources":["../../server/controllers/SubscriptionsController.js"],"names":["Cron","require","CronJob","validator","onGetSubscriptionsByUserId","req","res","subscriptions","Subscriptions","getSubscriptionsByUserId","params","userId","status","json","success","error","onGetAllSubscriptions","getSubscriptions","onCreateSubscriptions","validation","symbols","body","String","foundSubscriptions","createdSubscriptions","createSubscription","onUpdateSubscriptionsByUserId","updateUserSubscriptions","message","onAddSubscriptionByUserId","symbol","newJob","analyzeStock","onDeleteSubscriptionsByUserId","deleteSubscriptionsByUserId","deletedCount","onDeleteSubscriptionByUserId","deleteSubscriptionByUserId"],"mappings":"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","sourcesContent":["// libraries\nconst Cron = require('cron').CronJob;\nconst validator = require('validator');\n// models\nimport Subscriptions from '../models/Subscriptions';\n\n// Export Subscriptions Controller\nexport default {\n    // Finds subscriptions by their userId and returns the subscriptions on success\n    onGetSubscriptionsByUserId: async (req, res) => {\n        try {\n            const subscriptions = await Subscriptions.getSubscriptionsByUserId(req.params.userId);\n            return res.status(200).json({ success: true, subscriptions });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Returns a list of all subscriptions\n    onGetAllSubscriptions: async (req, res) => {\n        try {\n            // finds all subscriptions and returns them if there are any subscriptions\n            const subscriptions = await Subscriptions.getSubscriptions();\n            return res.status(200).json({ success: true, subscriptions });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Tries to create lists, returns the lists on success,\n    // otherwise returns an error\n    onCreateSubscriptions: async (req, res) => {\n        try {\n            let validation = true;\n            const { userId, symbols } = req.body;\n            // Validate the data from the request\n            if (!(typeof userId === 'string' || userId instanceof String)) {\n                validation = false;\n            }\n            // throw error on validation failure\n            if (!validation) return res.status(400).json(validation);\n            // Find if the subscriptions already exists\n            const foundSubscriptions = await Subscriptions.getSubscriptionsByUserId(userId);\n            // throw error if subscriptions already exists\n            if ((foundSubscriptions !== null)) return res.status(500).json({\n                success: false,\n                error: 'There is already subscriptions for this user.'\n            });\n            // create the subscriptions\n            const createdSubscriptions = await Subscriptions.createSubscription(userId, symbols);\n            // return the subscriptions and success message\n            return res.status(200).json({ success: true, createdSubscriptions });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Update the subscriptions with the given userId and returns the success message on success,\n    // otherwise returns an error\n    onUpdateSubscriptionsByUserId: async (req, res) => {\n        try {\n            await Subscriptions.updateUserSubscriptions(req.body.userId, req.body.symbols);\n            return res.status(200).json({\n                success: true,\n                message: `Updated subscriptions from user ${req.body.userId}.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Add a subscriptions with the given userId and returns the success message on success,\n    // otherwise returns an error\n    onAddSubscriptionByUserId: async (req, res) => {\n        try {\n            await Subscriptions.updateUserSubscriptions(req.body.userId, req.body.symbols, req.body.symbol);\n            // TODO start cron job\n            // start cron job\n            const newJob = new Cron('*/15 * * * *',\n                analyzeStock(req.body.userId, req.body.symbol), null, true, 'America/Los_Angeles');\n\n            // return message\n            return res.status(200).json({\n                success: true,\n                message: `Updated subscriptions from user ${req.body.userId}.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Delete the subscriptions with the given userId and returns the success message on success,\n    // otherwise returns an error\n    onDeleteSubscriptionsByUserId: async (req, res) => {\n        try {\n            const subscriptions = await Subscriptions.deleteSubscriptionsByUserId(req.params.userId);\n            return res.status(200).json({\n                success: true,\n                message: `Deleted a count of ${subscriptions.deletedCount} subscriptions.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n\n    // Delete the subscription with the given userId and symbol and returns the success message on success,\n    // otherwise returns an error\n    onDeleteSubscriptionByUserId: async (req, res) => {\n        try {\n            const subscriptions = await Subscriptions.deleteSubscriptionByUserId(req.params.userId, req.params.symbol);\n            return res.status(200).json({\n                success: true,\n                message: `Deleted a count of ${subscriptions.deletedCount} subscriptions.`\n            });\n        } catch (error) {\n            return res.status(500).json({ success: false, error: error });\n        }\n    },\n}\n"],"file":"SubscriptionsController.js"}