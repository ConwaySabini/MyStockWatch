{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["validator","require","onGetUserById","req","res","user","User","getUserById","params","id","status","json","success","error","onGetUserByEmail","getUserByEmail","email","onGetAllUsers","users","getUsers","onCreateUser","validation","firstName","lastName","type","password","body","isEmail","String","USER_TYPES","ADMIN","CONSUMER","found","createUser","onDeleteUserById","deleteUserById","message","deletedCount","onVerifyUser","verifyPassword","_id"],"mappings":"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","sourcesContent":["// libraries\nconst validator = require('validator');\n// models\nimport User, { USER_TYPES } from '../models/User.js';\n\n// Export User Controller\nexport default {\n  // Finds a user by their id and returns the user on success\n  onGetUserById: async (req, res) => {\n    try {\n      const user = await User.getUserById(req.params.id);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Finds a user with their email and returns the user if they exist, \n  // otherwise returns an error\n  onGetUserByEmail: async (req, res) => {\n    try {\n      // get the user and return the user if available\n      const user = await User.getUserByEmail(req.params.email);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Returns a list of all users\n  onGetAllUsers: async (req, res) => {\n    try {\n      // finds all users and returns them if there are any users\n      const users = await User.getUsers();\n      return res.status(200).json({ success: true, users });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Tries to create a user, returns the user on success, \n  // otherwise returns an error\n  onCreateUser: async (req, res) => {\n    try {\n      let validation = true;\n      const { firstName, lastName, type, email, password, } = req.body;\n      // Validate the data from the request\n      if (!(validator.isEmail(email))) {\n        validation = false;\n      }\n      if (!(typeof password === 'string' || password instanceof String)) {\n        validation = false;\n      }\n      if (!(typeof firstName === 'string' || firstName instanceof String)) {\n        validation = false;\n      }\n      if (!(typeof lastName === 'string' || lastName instanceof String)) {\n        validation = false;\n      }\n      if (!(type === USER_TYPES.ADMIN || type === USER_TYPES.CONSUMER)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Find if the user already exists\n      const found = await User.getUserByEmail(email);\n      // throw error if user already exists\n      if ((found !== null)) return res.status(500).json({\n        success: false,\n        error: 'There is already an account associated with this email.'\n      });\n      // create the user\n      const user = await User.createUser(\n        firstName,\n        lastName,\n        type,\n        email,\n        password\n      );\n      // return the user and success message\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the user with the given id and returns the success message on success,\n  // otherwise returns an error\n  onDeleteUserById: async (req, res) => {\n    try {\n      const user = await User.deleteUserById(req.params.id);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted a count of ${user.deletedCount} user.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Verify the user with the email and password\n  onVerifyUser: async (req, res) => {\n    try {\n      let validation = true;\n      const { email, password } = req.body;\n      // Validate the data from the request\n      if (!(validator.isEmail(email))) {\n        validation = false;\n      }\n      if (!(typeof password === 'string' || password instanceof String)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Verify the user email and password\n      const user = await User.verifyPassword(email, password);\n      if (user) return res.status(200).json({ success: true, id: user._id });\n      else return res.status(500).json({ success: false, error: 'Password is incorrect.' })\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n}\n"],"file":"UserController.js"}