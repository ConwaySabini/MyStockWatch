{"version":3,"sources":["../../server/controllers/User.js"],"names":["onGetAllUsers","req","res","users","UserModel","getUsers","status","json","success","error","onGetUserById","user","getUserById","params","id","onGetUserByEmail","getUserByEmail","email","onCreateUser","firstName","lastName","type","password","body","found","createUser","onDeleteUserById","deleteByUserById","message","deletedCount","onVerifyUser","isEmail","includes","verifyPassword","_id"],"mappings":"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","sourcesContent":["// utils\n//import makeValidation from '@withvoid/make-validation';\n// models\nimport UserModel, { USER_TYPES } from '../models/UserModel.js';\n\nexport default {\n  onGetAllUsers: async (req, res) => {\n    try {\n      const users = await UserModel.getUsers();\n      return res.status(200).json({ success: true, users });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  },\n\n  onGetUserById: async (req, res) => {\n    try {\n      const user = await UserModel.getUserById(req.params.id);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  },\n\n  onGetUserByEmail: async (req, res) => {\n    try {\n      const user = await UserModel.getUserByEmail(req.params.email);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  },\n\n  onCreateUser: async (req, res) => {\n    try {\n      // const validation = makeValidation(types => ({\n      //   payload: req.body,\n      //   checks: {\n      //     firstName: { type: types.string },\n      //     lastName: { type: types.string },\n      //     type: { type: types.enum, options: { enum: USER_TYPES } },\n      //     email: { type: types.string },\n      //     password: { type: types.string },\n      //   }\n      // }));\n      // if (!validation.success) return res.status(400).json(validation);\n      const { firstName, lastName, type, email, password } = req.body;\n      const found = await UserModel.getUserByEmail(email);\n      if ((found !== null)) return res.status(500).json({ success: false, error: 'There is already an account associated with this email.' })\n      const user = await UserModel.createUser(firstName, lastName, type, email, password);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  },\n\n  onDeleteUserById: async (req, res) => {\n    try {\n      const user = await UserModel.deleteByUserById(req.params.id);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted a count of ${user.deletedCount} user.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  },\n\n  onVerifyUser: async (req, res) => {\n    try {\n      // const validation = makeValidation(types => ({\n      //   payload: req.body,\n      //   checks: {\n      //     email: { type: types.string },\n      //     password: { type: types.string },\n      //   }\n      // }));\n      const { email, password } = req.body;\n      const isEmail = email.includes('@');\n      // if (!validation.success || !isEmail) return res.status(400).json(validation);\n      const user = await UserModel.verifyPassword(email, password);\n      if (user) return res.status(200).json({ success: true, id: user._id });\n      else return res.status(500).json({ success: false, error: 'Password is incorrect.' })\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error })\n    }\n  }\n}\n"],"file":"User.js"}