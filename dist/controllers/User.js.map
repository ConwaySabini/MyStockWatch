{"version":3,"sources":["../../server/controllers/User.js"],"names":["validator","require","onGetUserById","req","res","user","UserModel","getUserById","params","id","status","json","success","error","onGetUserByEmail","getUserByEmail","email","onGetAllUsers","users","getUsers","onCreateUser","validation","password","firstName","lastName","type","body","isEmail","String","found","createUser","onDeleteUserById","deleteByUserById","message","deletedCount","onVerifyUser","verifyPassword","_id"],"mappings":"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","sourcesContent":["// libraries\nconst validator = require('validator');\n\n// Export User Controller\nexport default {\n  // Finds a user by their id and returns the user on success\n  onGetUserById: async (req, res) => {\n    try {\n      const user = await UserModel.getUserById(req.params.id);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Finds a user with their email and returns the user if they exist, \n  // otherwise returns an error\n  onGetUserByEmail: async (req, res) => {\n    try {\n      // get the user and return the user if available\n      const user = await UserModel.getUserByEmail(req.params.email);\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Returns a list of all users\n  onGetAllUsers: async (req, res) => {\n    try {\n      // finds all users and returns them if there are any users\n      const users = await UserModel.getUsers();\n      return res.status(200).json({ success: true, users });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Tries to create a user, returns the user on success, \n  // otherwise returns an error\n  onCreateUser: async (req, res) => {\n    try {\n      let validation = true;\n      const { email, password, firstName, lastName, type } = req.body;\n      // Validate the data from the request\n      if (!validator.isEmail(email)) {\n        validation = false;\n      }\n      if (!(typeof password === 'string' || password instanceof String)) {\n        validation = false;\n      }\n      if (!(typeof firstName === 'string' || firstName instanceof String)) {\n        validation = false;\n      }\n      if (!(typeof lastName === 'string' || lastName instanceof String)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Find if the user already exists\n      const found = await UserModel.getUserByEmail(email);\n      // throw error if user already exists\n      if ((found !== null)) return res.status(500).json({\n        success: false,\n        error: 'There is already an account associated with this email.'\n      });\n      // create the user\n      const user = await UserModel.createUser(\n        firstName,\n        lastName,\n        type,\n        email,\n        password\n      );\n      // return the user and success message\n      return res.status(200).json({ success: true, user });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the user with the given id and returns the success message on success,\n  // otherwise returns an error\n  onDeleteUserById: async (req, res) => {\n    try {\n      const user = await UserModel.deleteByUserById(req.params.id);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted a count of ${user.deletedCount} user.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Verify the user with the email and password\n  onVerifyUser: async (req, res) => {\n    try {\n      let validation = true;\n      const { email, password } = req.body;\n      // Validate the data from the request\n      if (!validator.isEmail(email)) {\n        validation = false;\n      }\n      if (!(typeof password === 'string' || password instanceof String)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Verify the user email and password\n      const user = await UserModel.verifyPassword(email, password);\n      if (user) return res.status(200).json({ success: true, id: user._id });\n      else return res.status(500).json({ success: false, error: 'Password is incorrect.' })\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  }\n}\n"],"file":"User.js"}