{"version":3,"sources":["../../server/controllers/StocksController.js"],"names":["validator","require","onGetStocksById","req","res","stocks","UserStocks","getUserById","params","id","status","json","success","error","onGetStocksByUserId","getStocksByUserId","userId","onGetAllStocks","users","getUsers","onCreateStocks","validation","body","String","foundStocks","createdStocks","createUserStocks","onUpdateStocksByUserId","updateUserStocks","message","onDeleteStocksById","deletedStocks","deleteStocksById","deletedCount","onDeleteStocksByUserId"],"mappings":";;;;;;;AAGA;;;;AAHA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB,C,CACA;;;AAGA;eACe;AACb;AACAC,EAAAA,eAAe,EAAE,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMC,oBAAWC,WAAX,CAAuBJ,GAAG,CAACK,MAAJ,CAAWC,EAAlC,CAArB;AACA,aAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBP,QAAAA;AAAjB,OAArB,CAAP;AACD,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GATY;AAWb;AACA;AACAC,EAAAA,mBAAmB,EAAE,OAAOX,GAAP,EAAYC,GAAZ,KAAoB;AACvC,QAAI;AACF;AACA,YAAMC,MAAM,GAAG,MAAMC,oBAAWS,iBAAX,CAA6BZ,GAAG,CAACK,MAAJ,CAAWQ,MAAxC,CAArB;AACA,aAAOZ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBP,QAAAA;AAAjB,OAArB,CAAP;AACD,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GArBY;AAuBb;AACAI,EAAAA,cAAc,EAAE,OAAOd,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAI;AACF;AACA,YAAMc,KAAK,GAAG,MAAMZ,oBAAWa,QAAX,EAApB;AACA,aAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBM,QAAAA;AAAjB,OAArB,CAAP;AACD,KAJD,CAIE,OAAOL,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GAhCY;AAkCb;AACA;AACAO,EAAAA,cAAc,EAAE,OAAOjB,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAI;AACF,UAAIiB,UAAU,GAAG,IAAjB;AACA,YAAM;AAAEL,QAAAA,MAAF;AAAUX,QAAAA;AAAV,UAAqBF,GAAG,CAACmB,IAA/B,CAFE,CAGF;;AACA,UAAI,EAAE,OAAON,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,YAAYO,MAAlD,CAAJ,EAA+D;AAC7DF,QAAAA,UAAU,GAAG,KAAb;AACD,OANC,CAOF;;;AACA,UAAI,CAACA,UAAL,EAAiB,OAAOjB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,UAArB,CAAP,CARf,CASF;;AACA,YAAMG,WAAW,GAAG,MAAMlB,oBAAWS,iBAAX,CAA6BC,MAA7B,CAA1B,CAVE,CAWF;;AACA,UAAKQ,WAAW,KAAK,IAArB,EAA4B,OAAOpB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACtDC,QAAAA,OAAO,EAAE,KAD6C;AAEtDC,QAAAA,KAAK,EAAE;AAF+C,OAArB,CAAP,CAZ1B,CAgBF;;AACA,YAAMY,aAAa,GAAG,MAAMnB,oBAAWoB,gBAAX,CAC1BV,MAD0B,EAE1BX,MAF0B,CAA5B,CAjBE,CAqBF;;AACA,aAAOD,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBa,QAAAA;AAAjB,OAArB,CAAP;AACD,KAvBD,CAuBE,OAAOZ,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GA/DY;AAiEb;AACA;AACAc,EAAAA,sBAAsB,EAAE,OAAOxB,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,QAAI;AACF,YAAME,oBAAWsB,gBAAX,CAA4BzB,GAAG,CAACK,MAAJ,CAAWQ,MAAvC,CAAN;AACA,aAAOZ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,IADiB;AAE1BiB,QAAAA,OAAO,EAAG,4BAA2B1B,GAAG,CAACK,MAAJ,CAAWQ,MAAO;AAF7B,OAArB,CAAP;AAID,KAND,CAME,OAAOH,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GA7EY;AA+Eb;AACA;AACAiB,EAAAA,kBAAkB,EAAE,OAAO3B,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAI;AACF,YAAM2B,aAAa,GAAG,MAAMzB,oBAAW0B,gBAAX,CAA4B7B,GAAG,CAACK,MAAJ,CAAWC,EAAvC,CAA5B;AACA,aAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,IADiB;AAE1BiB,QAAAA,OAAO,EAAG,WAAUE,aAAa,CAACE,YAAa;AAFrB,OAArB,CAAP;AAID,KAND,CAME,OAAOpB,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF,GA3FY;AA6Fb;AACA;AACAqB,EAAAA,sBAAsB,EAAE,OAAO/B,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,QAAI;AACF,YAAM2B,aAAa,GAAG,MAAMzB,oBAAW0B,gBAAX,CAA4B7B,GAAG,CAACK,MAAJ,CAAWQ,MAAvC,CAA5B;AACA,aAAOZ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,IADiB;AAE1BiB,QAAAA,OAAO,EAAG,WAAUE,aAAa,CAACE,YAAa;AAFrB,OAArB,CAAP;AAID,KAND,CAME,OAAOpB,KAAP,EAAc;AACd,aAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAArB,CAAP;AACD;AACF;AAzGY,C","sourcesContent":["// libraries\nconst validator = require('validator');\n// models\nimport UserStocks from '../models/UserStocks';\n\n// Export User Controller\nexport default {\n  // Finds stocks by their id and returns the stocks on success\n  onGetStocksById: async (req, res) => {\n    try {\n      const stocks = await UserStocks.getUserById(req.params.id);\n      return res.status(200).json({ success: true, stocks });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Find stocks with their userId and returns the stocks if they exist,\n  // otherwise returns an error\n  onGetStocksByUserId: async (req, res) => {\n    try {\n      // get the stocks and return the stocks if available\n      const stocks = await UserStocks.getStocksByUserId(req.params.userId);\n      return res.status(200).json({ success: true, stocks });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Returns a list of all stocks\n  onGetAllStocks: async (req, res) => {\n    try {\n      // finds all stocks and returns them if there are any stocks\n      const users = await UserStocks.getUsers();\n      return res.status(200).json({ success: true, users });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Tries to create stocks, returns the stocks on success,\n  // otherwise returns an error\n  onCreateStocks: async (req, res) => {\n    try {\n      let validation = true;\n      const { userId, stocks } = req.body;\n      // Validate the data from the request\n      if (!(typeof userId === 'string' || userId instanceof String)) {\n        validation = false;\n      }\n      // throw error on validation failure\n      if (!validation) return res.status(400).json(validation);\n      // Find if the stocks already exists\n      const foundStocks = await UserStocks.getStocksByUserId(userId);\n      // throw error if stocks already exists\n      if ((foundStocks !== null)) return res.status(500).json({\n        success: false,\n        error: 'There is already stocks for this user.'\n      });\n      // create the stocks\n      const createdStocks = await UserStocks.createUserStocks(\n        userId,\n        stocks\n      );\n      // return the stocks and success message\n      return res.status(200).json({ success: true, createdStocks });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Update the stocks with the given userId and returns the success message on success,\n  // otherwise returns an error\n  onUpdateStocksByUserId: async (req, res) => {\n    try {\n      await UserStocks.updateUserStocks(req.params.userId);\n      return res.status(200).json({\n        success: true,\n        message: `Updated stocks from user ${req.params.userId}.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the stocks with the given id and returns the success message on success,\n  // otherwise returns an error\n  onDeleteStocksById: async (req, res) => {\n    try {\n      const deletedStocks = await UserStocks.deleteStocksById(req.params.id);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted ${deletedStocks.deletedCount} stocks.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n\n  // Delete the stocks with the given userId and returns the success message on success,\n  // otherwise returns an error\n  onDeleteStocksByUserId: async (req, res) => {\n    try {\n      const deletedStocks = await UserStocks.deleteStocksById(req.params.userId);\n      return res.status(200).json({\n        success: true,\n        message: `Deleted ${deletedStocks.deletedCount} stocks.`\n      });\n    } catch (error) {\n      return res.status(500).json({ success: false, error: error });\n    }\n  },\n}\n"],"file":"StocksController.js"}