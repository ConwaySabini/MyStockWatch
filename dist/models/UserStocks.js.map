{"version":3,"sources":["../../server/models/UserStocks.js"],"names":["userStockSchema","mongoose","Schema","_id","type","String","default","userId","stocks","Types","Mixed","timestamps","collection","statics","createUserStocks","create","error","updateUserStocks","foundStocks","findOne","update","$set","getStocksById","id","getStocksByUserId","getAllStocks","find","deleteByStocksById","deleteOne","deleteStocksByUserId","getStocks","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the user stocks model\nconst userStockSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    // stocks: [{\n    //   type: Object\n    // }]\n    // stocks: [{\n    //   symbol: String,\n    //   data: {\n    //     meta: {\n    //       symbol: String,\n    //       interval: String,\n    //       currency: String,\n    //       exchange_timezone: String,\n    //       exchange: String,\n    //       type: { type: String },\n    //     },\n    //     values: [{\n    //       datetime: String,\n    //       open: String,\n    //       high: String,\n    //       low: String,\n    //       close: String,\n    //       volume: String,\n    //     }],\n    //     status: String,\n    //   },\n    //   percentChange: Number,\n    //   timeline: String,\n    //   id: String,\n    // }],\n    stocks: [mongoose.Schema.Types.Mixed]\n  },\n  {\n    timestamps: true,\n    collection: \"users\",\n  }\n);\n\n// Creates user stock data\nuserStockSchema.statics.createUserStocks = async function (userId, stocks) {\n  try {\n    // create the stocks if they do not exist\n    return await this.create({ userId, stocks });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Updates user stock data\nuserStockSchema.statics.updateUserStocks = async function (userId, stocks) {\n  try {\n    // find the stocks for the specified user\n    const foundStocks = await this.findOne({ userId: userId });\n    if (!foundStocks) throw ({ error: 'No stocks with this userId found' });\n    // update the stocks\n    this.update({ _id: foundStocks._id }, { $set: { stocks: stocks } });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the stocks by their id and return the found stocks if they exist\nuserStockSchema.statics.getStocksById = async function (id) {\n  try {\n    const stocks = await this.findOne({ _id: id });\n    if (!stocks) throw ({ error: 'No stocks with this id found' });\n    return stocks;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the stocks by their userId and return the found stocks if they exist\nuserStockSchema.statics.getStocksByUserId = async function (userId) {\n  try {\n    const stocks = await this.findOne({ userId: userId });\n    return stocks;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user stocks in the database and return them\nuserStockSchema.statics.getAllStocks = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete stocks with the given id and return the result\nuserStockSchema.statics.deleteByStocksById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete the stocks by their userId and return result\nuserStockSchema.statics.deleteStocksByUserId = async function (userId) {\n  try {\n    return await this.deleteOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get stocks by their ids and return the found stocks\nuserStockSchema.statics.getStocks = async function (ids) {\n  try {\n    const stocks = await this.find({ _id: { $in: ids } });\n    if (!stocks) throw ({ error: 'No stocks with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"UserStocks\", userStockSchema);\n"],"file":"UserStocks.js"}