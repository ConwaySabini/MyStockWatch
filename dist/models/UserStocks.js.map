{"version":3,"sources":["../../server/models/UserStocks.js"],"names":["userStockSchema","mongoose","Schema","_id","type","String","default","userId","stocks","symbol","data","meta","interval","currency","exchange_timezone","exchange","values","datetime","open","high","low","close","volume","status","percentChange","Number","timeline","id","timestamps","collection","statics","createUserStocks","create","error","updateUserStocks","foundStocks","findOne","update","$set","getStocksById","getStocksByUserId","getAllStocks","find","deleteByStocksById","deleteOne","deleteStocksByUserId","getStocks","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the user stocks model\nconst userStockSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    // stocks: [{\n    //   type: Object\n    // }]\n    stocks: [{\n      symbol: String,\n      data: {\n        meta: {\n          symbol: String,\n          interval: String,\n          currency: String,\n          exchange_timezone: String,\n          exchange: String,\n          type: { type: String },\n        },\n        values: [{\n          datetime: String,\n          open: String,\n          high: String,\n          low: String,\n          close: String,\n          volume: String,\n        }],\n        status: String,\n      },\n      percentChange: Number,\n      timeline: String,\n      id: String,\n    }],\n  },\n  {\n    timestamps: true,\n    collection: \"users\",\n  }\n);\n\n// Creates user stock data\nuserStockSchema.statics.createUserStocks = async function (userId, stocks) {\n  try {\n    // create the stocks if they do not exist\n    return await this.create({ userId, stocks });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Updates user stock data\nuserStockSchema.statics.updateUserStocks = async function (userId, stocks) {\n  try {\n    // find the stocks for the specified user\n    const foundStocks = await this.findOne({ userId: userId });\n    if (!foundStocks) throw ({ error: 'No stocks with this userId found' });\n    // update the stocks\n    this.update({ _id: foundStocks._id }, { $set: { stocks: stocks } });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the stocks by their id and return the found stocks if they exist\nuserStockSchema.statics.getStocksById = async function (id) {\n  try {\n    const stocks = await this.findOne({ _id: id });\n    if (!stocks) throw ({ error: 'No stocks with this id found' });\n    return stocks;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the stocks by their userId and return the found stocks if they exist\nuserStockSchema.statics.getStocksByUserId = async function (userId) {\n  try {\n    const stocks = await this.findOne({ userId: userId });\n    return stocks;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user stocks in the database and return them\nuserStockSchema.statics.getAllStocks = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete stocks with the given id and return the result\nuserStockSchema.statics.deleteByStocksById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete the stocks by their userId and return result\nuserStockSchema.statics.deleteStocksByUserId = async function (userId) {\n  try {\n    return await this.deleteOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get stocks by their ids and return the found stocks\nuserStockSchema.statics.getStocks = async function (ids) {\n  try {\n    const stocks = await this.find({ _id: { $in: ids } });\n    if (!stocks) throw ({ error: 'No stocks with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"UserStocks\", userStockSchema);\n"],"file":"UserStocks.js"}