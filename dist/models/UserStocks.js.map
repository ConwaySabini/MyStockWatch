{"version":3,"sources":["../../server/models/UserStocks.js"],"names":["stockSchema","mongoose","Schema","symbol","String","data","meta","Types","Mixed","values","status","percentChange","Number","timeline","id","stockDataSchema","_id","type","default","userId","stocks","timestamps","collection","statics","createUserStocks","create","error","updateUserStocks","deleteOne","getStocksById","findOne","getStocksByUserId","getAllStocks","find","deleteStocksById","deleteStocksByUserId","getStocks","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the stock Objects\nconst stockSchema = new mongoose.Schema(\n    {\n        symbol: String,\n        data: {\n            meta: mongoose.Schema.Types.Mixed,\n            values: [mongoose.Schema.Types.Mixed],\n            status: String,\n        },\n        percentChange: Number,\n        timeline: String,\n        id: String,\n    },\n);\n\n// Schema for the user stocks model\nconst stockDataSchema = new mongoose.Schema(\n    {\n        _id: {\n            type: String,\n            default: () => nanoid(),\n        },\n        userId: String,\n        stocks: [stockSchema],\n    },\n    {\n        timestamps: true,\n        collection: \"stocks\",\n    }\n);\n\n// Creates user stock data\nstockDataSchema.statics.createUserStocks = async function (userId, stocks) {\n    try {\n        // create the stocks if they do not exist\n        return await this.create({ userId, stocks });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Updates user stock data\nstockDataSchema.statics.updateUserStocks = async function (userId, stocks) {\n    try {\n        // updated the stocks\n        // delete the existing stocks\n        await this.deleteOne({ userId: userId });\n        // create the updated stocks\n        await this.create({ userId, stocks });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the stocks by their id and return the found stocks if they exist\nstockDataSchema.statics.getStocksById = async function (id) {\n    try {\n        const stocks = await this.findOne({ _id: id });\n        if (!stocks) throw ({ error: 'No stocks with this id found' });\n        return stocks;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the stocks by their userId and return the found stocks if they exist\nstockDataSchema.statics.getStocksByUserId = async function (userId) {\n    try {\n        return await this.findOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get all user stocks in the database and return them\nstockDataSchema.statics.getAllStocks = async function () {\n    try {\n        return await this.find();\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete stocks with the given id and return the result\nstockDataSchema.statics.deleteStocksById = async function (id) {\n    try {\n        return await this.deleteOne({ _id: id });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete the stocks by their userId and return result\nstockDataSchema.statics.deleteStocksByUserId = async function (userId) {\n    try {\n        return await this.deleteOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get stocks by their ids and return the found stocks\nstockDataSchema.statics.getStocks = async function (ids) {\n    try {\n        const stocks = await this.find({ _id: { $in: ids } });\n        if (!stocks) throw ({ error: 'No stocks with these ids were found' });\n        return users;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport default mongoose.model(\"UserStocks\", stockDataSchema);\n"],"file":"UserStocks.js"}