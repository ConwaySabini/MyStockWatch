{"version":3,"sources":["../../server/models/UserModel.js"],"names":["USER_TYPES","CONSUMER","SUPPORT","userSchema","mongoose","Schema","_id","type","String","default","firstName","lastName","email","password","timestamps","collection","statics","createUser","pass","bcrypt","hash","user","create","error","getUserById","id","findOne","getUsers","users","find","deleteByUserById","result","deleteOne","getUserByIds","ids","$in","getUserByEmail","userEmail","verifyPassword","isPassword","compareSync","model"],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\nimport bcrypt from 'bcrypt';\n\nexport const USER_TYPES = {\n  CONSUMER: \"consumer\",\n  SUPPORT: \"support\",\n};\n\nconst userSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    firstName: String,\n    lastName: String,\n    type: String,\n    email: String,\n    password: String,\n  },\n  {\n    timestamps: true,\n    collection: \"users\",\n  }\n);\n\n/**\n * @param {String} firstName\n * @param {String} lastName\n * @returns {Object} new user object created\n */\nuserSchema.statics.createUser = async function (firstName, lastName, type, email, pass) {\n  try {\n    const password = await bcrypt.hash(pass, 10);\n    const user = await this.create({ firstName, lastName, type, email, password });\n    return user;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * @param {String} id, user id\n * @return {Object} User profile object\n */\nuserSchema.statics.getUserById = async function (id) {\n  try {\n    const user = await this.findOne({ _id: id });\n    if (!user) throw ({ error: 'No user with this id found' });\n    return user;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * @return {Array} List of all users\n */\nuserSchema.statics.getUsers = async function () {\n  try {\n    const users = await this.find();\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * @param {Array} ids, string of user ids\n * @return {Array of Objects} users list\n */\nuserSchema.statics.deleteByUserById = async function (id) {\n  try {\n    const result = await this.deleteOne({ _id: id });\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n/**\n * @param {Array} ids, string of user ids\n * @return {Array of Objects} users list\n */\nuserSchema.statics.getUserByIds = async function (ids) {\n  try {\n    const users = await this.find({ _id: { $in: ids } });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * @param {String} userEmail, string of user email\n * @return {Object} user with email\n */\nuserSchema.statics.getUserByEmail = async function (userEmail) {\n  try {\n    const user = await this.findOne({ \"email\": userEmail });\n    if (!user) return null;\n    return user;\n  } catch (error) {\n    throw error;\n  }\n}\n\nuserSchema.statics.verifyPassword = async function (email, password) {\n  try {\n    //Get hashed password from the database and compare\n    const user = await this.findOne({ \"email\": email });\n    if (!user) throw ({ error: 'No user with this email' });\n    const isPassword = bcrypt.compareSync(password, user.password);\n    if (!isPassword) throw ({ error: 'Password is incorrect' });\n    return user;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"User\", userSchema);\n"],"file":"UserModel.js"}