{"version":3,"sources":["../../server/models/UserFavorites.js"],"names":["favoriteSchema","mongoose","Schema","symbol","String","data","meta","Types","Mixed","values","status","percentChange","Number","timeline","id","favoritesSchema","_id","type","default","userId","favorites","timestamps","collection","statics","createUserFavorites","create","error","updateUserFavorites","deleteOne","getFavoritesById","findOne","getFavoritesByUserId","getAllFavorites","find","deleteFavoritesById","deleteFavoritesByUserId","getFavorites","ids","$in","users","model"],"mappings":";;;;;;;AACA;;AACA;;;;AAFA;AAIA;AACA,MAAMA,cAAc,GAAG,IAAIC,kBAASC,MAAb,CACnB;AACIC,EAAAA,MAAM,EAAEC,MADZ;AAEIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEL,kBAASC,MAAT,CAAgBK,KAAhB,CAAsBC,KAD1B;AAEFC,IAAAA,MAAM,EAAE,CAACR,kBAASC,MAAT,CAAgBK,KAAhB,CAAsBC,KAAvB,CAFN;AAGFE,IAAAA,MAAM,EAAEN;AAHN,GAFV;AAOIO,EAAAA,aAAa,EAAEC,MAPnB;AAQIC,EAAAA,QAAQ,EAAET,MARd;AASIU,EAAAA,EAAE,EAAEV;AATR,CADmB,CAAvB,C,CAcA;;AACA,MAAMW,eAAe,GAAG,IAAId,kBAASC,MAAb,CACpB;AACIc,EAAAA,GAAG,EAAE;AACDC,IAAAA,IAAI,EAAEb,MADL;AAEDc,IAAAA,OAAO,EAAE,MAAM;AAFd,GADT;AAKIC,EAAAA,MAAM,EAAEf,MALZ;AAMIgB,EAAAA,SAAS,EAAE,CAACpB,cAAD;AANf,CADoB,EASpB;AACIqB,EAAAA,UAAU,EAAE,IADhB;AAEIC,EAAAA,UAAU,EAAE;AAFhB,CAToB,CAAxB,C,CAeA;;AACAP,eAAe,CAACQ,OAAhB,CAAwBC,mBAAxB,GAA8C,gBAAgBL,MAAhB,EAAwBC,SAAxB,EAAmC;AAC7E,MAAI;AACA;AACA,WAAO,MAAM,KAAKK,MAAL,CAAY;AAAEN,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAZ,CAAb;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAPD,C,CASA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBI,mBAAxB,GAA8C,gBAAgBR,MAAhB,EAAwBC,SAAxB,EAAmC;AAC7E,MAAI;AACA;AACA,UAAM,KAAKQ,SAAL,CAAe;AAAET,MAAAA,MAAM,EAAEA;AAAV,KAAf,CAAN,CAFA,CAGA;;AACA,UAAM,KAAKM,MAAL,CAAY;AAAEN,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAZ,CAAN;AACH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CATD,C,CAWA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBM,gBAAxB,GAA2C,gBAAgBf,EAAhB,EAAoB;AAC3D,MAAI;AACA,UAAMM,SAAS,GAAG,MAAM,KAAKU,OAAL,CAAa;AAAEd,MAAAA,GAAG,EAAEF;AAAP,KAAb,CAAxB;AACA,QAAI,CAACM,SAAL,EAAgB,MAAO;AAAEM,MAAAA,KAAK,EAAE;AAAT,KAAP;AAChB,WAAON,SAAP;AACH,GAJD,CAIE,OAAOM,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CARD,C,CAUA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBQ,oBAAxB,GAA+C,gBAAgBZ,MAAhB,EAAwB;AACnE,MAAI;AACA,WAAO,KAAKW,OAAL,CAAa;AAAEX,MAAAA,MAAM,EAAEA;AAAV,KAAb,CAAP;AACH,GAFD,CAEE,OAAOO,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND,C,CAQA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBS,eAAxB,GAA0C,kBAAkB;AACxD,MAAI;AACA,WAAO,MAAM,KAAKC,IAAL,EAAb;AACH,GAFD,CAEE,OAAOP,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND,C,CAQA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBW,mBAAxB,GAA8C,gBAAgBpB,EAAhB,EAAoB;AAC9D,MAAI;AACA,WAAO,MAAM,KAAKc,SAAL,CAAe;AAAEZ,MAAAA,GAAG,EAAEF;AAAP,KAAf,CAAb;AACH,GAFD,CAEE,OAAOY,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND,C,CAQA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBY,uBAAxB,GAAkD,gBAAgBhB,MAAhB,EAAwB;AACtE,MAAI;AACA,WAAO,MAAM,KAAKS,SAAL,CAAe;AAAET,MAAAA,MAAM,EAAEA;AAAV,KAAf,CAAb;AACH,GAFD,CAEE,OAAOO,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND,C,CASA;;;AACAX,eAAe,CAACQ,OAAhB,CAAwBa,YAAxB,GAAuC,gBAAgBC,GAAhB,EAAqB;AACxD,MAAI;AACA,UAAMjB,SAAS,GAAG,MAAM,KAAKa,IAAL,CAAU;AAAEjB,MAAAA,GAAG,EAAE;AAAEsB,QAAAA,GAAG,EAAED;AAAP;AAAP,KAAV,CAAxB;AACA,QAAI,CAACjB,SAAL,EAAgB,MAAO;AAAEM,MAAAA,KAAK,EAAE;AAAT,KAAP;AAChB,WAAOa,KAAP;AACH,GAJD,CAIE,OAAOb,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CARD;;eAUezB,kBAASuC,KAAT,CAAe,eAAf,EAAgCzB,eAAhC,C","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the favorite Objects\nconst favoriteSchema = new mongoose.Schema(\n    {\n        symbol: String,\n        data: {\n            meta: mongoose.Schema.Types.Mixed,\n            values: [mongoose.Schema.Types.Mixed],\n            status: String,\n        },\n        percentChange: Number,\n        timeline: String,\n        id: String,\n    },\n);\n\n// Schema for the user favorites model\nconst favoritesSchema = new mongoose.Schema(\n    {\n        _id: {\n            type: String,\n            default: () => nanoid(),\n        },\n        userId: String,\n        favorites: [favoriteSchema]\n    },\n    {\n        timestamps: true,\n        collection: \"favorites\",\n    }\n);\n\n// Creates user favorites\nfavoritesSchema.statics.createUserFavorites = async function (userId, favorites) {\n    try {\n        // create the favorites\n        return await this.create({ userId, favorites });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Updates user favorite data\nfavoritesSchema.statics.updateUserFavorites = async function (userId, favorites) {\n    try {\n        // delete the existing favorites\n        await this.deleteOne({ userId: userId });\n        // create the updated favorites\n        await this.create({ userId, favorites });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the favorites by their id and return the found favorites if they exist\nfavoritesSchema.statics.getFavoritesById = async function (id) {\n    try {\n        const favorites = await this.findOne({ _id: id });\n        if (!favorites) throw ({ error: 'No favorites with this id found' });\n        return favorites;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the favorites by their userId and return the found favorites if they exist\nfavoritesSchema.statics.getFavoritesByUserId = async function (userId) {\n    try {\n        return this.findOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get all user favorites in the database and return them\nfavoritesSchema.statics.getAllFavorites = async function () {\n    try {\n        return await this.find();\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete favorites with the given id and return the result\nfavoritesSchema.statics.deleteFavoritesById = async function (id) {\n    try {\n        return await this.deleteOne({ _id: id });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete the favorites by their userId and return result\nfavoritesSchema.statics.deleteFavoritesByUserId = async function (userId) {\n    try {\n        return await this.deleteOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n\n// Get favorites by their ids and return the found favorites\nfavoritesSchema.statics.getFavorites = async function (ids) {\n    try {\n        const favorites = await this.find({ _id: { $in: ids } });\n        if (!favorites) throw ({ error: 'No favorites with these ids were found' });\n        return users;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport default mongoose.model(\"UserFavorites\", favoritesSchema);\n"],"file":"UserFavorites.js"}