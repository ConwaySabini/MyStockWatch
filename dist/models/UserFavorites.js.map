{"version":3,"sources":["../../server/models/UserFavorites.js"],"names":["userFavoritesSchema","mongoose","Schema","_id","type","String","default","userId","favorites","id","symbol","percentChange","Number","timeline","status","data","interval","currency","exchange_timezone","exchange","stockType","values","datetime","open","high","low","close","volume","timestamps","collection","statics","createUserFavorites","create","favaorites","error","getFavoritesById","findOne","getFavoritesByUserId","getAllFavorites","find","deletFavoritesById","deleteOne","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the user favorites model\nconst userFavoritesSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    favorites: [{\n      id: String,\n      symbol: String,\n      percentChange: Number,\n      timeline: String,\n      status: String,\n      data: {\n        symbol: String,\n        interval: String,\n        currency: String,\n        exchange_timezone: String,\n        exchange: String,\n        stockType: String,\n        values: [{\n          datetime: String,\n          open: String,\n          high: String,\n          low: String,\n          close: String,\n          volume: String,\n        }],\n      },\n    }],\n  },\n  {\n    timestamps: true,\n    collection: \"users\",\n  }\n);\n\n// Creates user favorites\nuserFavoritesSchema.statics.createUserFavorites = async function (userId, favorites) {\n  try {\n    // create the favorites\n    return await this.create({ userId, favaorites });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the favorites by their id and return the found favorites if they exist\nuserFavoritesSchema.statics.getFavoritesById = async function (id) {\n  try {\n    const favorites = await this.findOne({ _id: id });\n    if (!favorites) throw ({ error: 'No favorites with this id found' });\n    return favorites;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the favorites by their userId and return the found favorites if they exist\nuserFavoritesSchema.statics.getFavoritesByUserId = async function (userId) {\n  try {\n    const favorites = await this.findOne({ userId: userId });\n    if (!favorites) throw ({ error: 'No favorites with this userId found' });\n    return favorites;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user favorites in the database and return them\nuserFavoritesSchema.statics.getAllFavorites = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete favorites with the given id and return the result\nuserFavoritesSchema.statics.deletFavoritesById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n// Get favorites by their ids and return the found favorites\nuserFavoritesSchema.statics.getAllFavorites = async function (ids) {\n  try {\n    const favorites = await this.find({ _id: { $in: ids } });\n    if (!favorites) throw ({ error: 'No favorites with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"UserFavorites\", userFavoritesSchema);\n"],"file":"UserFavorites.js"}