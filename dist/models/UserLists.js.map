{"version":3,"sources":["../../server/models/UserLists.js"],"names":["userListsSchema","mongoose","Schema","_id","type","String","default","userId","lists","id","name","stocks","symbol","percentChange","Number","timeline","status","data","interval","currency","exchange_timezone","exchange","stockType","values","datetime","open","high","low","close","volume","timestamps","collection","statics","createUserLists","create","error","getListsById","findOne","getListsByUserId","getLists","find","deleteListsById","deleteOne","getAllLists","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the user lists model\nconst userListsSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    lists: [{\n      id: String,\n      name: String,\n      stocks: [{\n        id: String,\n        symbol: String,\n        percentChange: Number,\n        timeline: String,\n        status: String,\n        data: {\n          symbol: String,\n          interval: String,\n          currency: String,\n          exchange_timezone: String,\n          exchange: String,\n          stockType: String,\n          values: [{\n            datetime: String,\n            open: String,\n            high: String,\n            low: String,\n            close: String,\n            volume: String,\n          }],\n        },\n      }]\n    }],\n  },\n  {\n    timestamps: true,\n    collection: \"users\",\n  }\n);\n\n// Creates user lists data\nuserListsSchema.statics.createUserLists = async function (userId, stocks) {\n  try {\n    // create the lists\n    return await this.create({ userId, stocks });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their id and return the found lists if they exist\nuserListsSchema.statics.getListsById = async function (id) {\n  try {\n    const lists = await this.findOne({ _id: id });\n    if (!lists) throw ({ error: 'No lists with this id found' });\n    return lists;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their userId and return the found lists if they exist\nuserListsSchema.statics.getListsByUserId = async function (userId) {\n  try {\n    const lists = await this.findOne({ userId: userId });\n    if (!lists) throw ({ error: 'No lists with this userId found' });\n    return lists;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user lists in the database and return them\nuserListsSchema.statics.getLists = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete lists with the given id and return the result\nuserListsSchema.statics.deleteListsById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n// Get lists by their ids and return the found lists\nuserListsSchema.statics.getAllLists = async function (ids) {\n  try {\n    const lists = await this.find({ _id: { $in: ids } });\n    if (!lists) throw ({ error: 'No lists with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"UserLists\", userListsSchema);\n"],"file":"UserLists.js"}