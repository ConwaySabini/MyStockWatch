{"version":3,"sources":["../../server/models/UserLists.js"],"names":["stockSchema","mongoose","Schema","symbol","String","data","Types","Mixed","percentChange","Number","timeline","id","list","name","stocks","listsSchema","_id","type","default","userId","lists","timestamps","collection","statics","createUserLists","create","error","updateUserLists","deleteOne","getListsById","findOne","getListsByUserId","getAllLists","find","deleteListsById","deleteListsByUserId","getLists","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n\n\n// Schema for the stock Objects\nconst stockSchema = new mongoose.Schema(\n  {\n    symbol: String,\n    data: [mongoose.Schema.Types.Mixed],\n    percentChange: Number,\n    timeline: String,\n    id: String,\n  },\n);\n\n// Schema for the list Objects\nconst list = new mongoose.Schema(\n  {\n    id: String,\n    name: String,\n    stocks: [stockSchema],\n  },\n);\n\n// Schema for the user lists model\nconst listsSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    lists: [list]\n  },\n  {\n    timestamps: true,\n    collection: \"lists\",\n  }\n);\n\n// Creates user lists\nlistsSchema.statics.createUserLists = async function (userId, lists) {\n  try {\n    // create the lists\n    return await this.create({ userId, lists });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Updates user favorite data\nlistsSchema.statics.updateUserLists = async function (userId, lists) {\n  try {\n    // delete the existing lists\n    await this.deleteOne({ userId: userId });\n    // create the updated lists\n    await this.create({ userId, lists });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their id and return the found lists if they exist\nlistsSchema.statics.getListsById = async function (id) {\n  try {\n    const lists = await this.findOne({ _id: id });\n    if (!lists) throw ({ error: 'No lists with this id found' });\n    return lists;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their userId and return the found lists if they exist\nlistsSchema.statics.getListsByUserId = async function (userId) {\n  try {\n    return this.findOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user lists in the database and return them\nlistsSchema.statics.getAllLists = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete lists with the given id and return the result\nlistsSchema.statics.deleteListsById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete the lists by their userId and return result\nlistsSchema.statics.deleteListsByUserId = async function (userId) {\n  try {\n    return await this.deleteOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n// Get lists by their ids and return the found lists\nlistsSchema.statics.getLists = async function (ids) {\n  try {\n    const lists = await this.find({ _id: { $in: ids } });\n    if (!lists) throw ({ error: 'No lists with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"Userlists\", listsSchema);\n"],"file":"UserLists.js"}