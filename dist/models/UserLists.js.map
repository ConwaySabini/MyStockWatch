{"version":3,"sources":["../../server/models/UserLists.js"],"names":["stockSchema","mongoose","Schema","symbol","String","data","meta","Types","Mixed","values","status","percentChange","Number","timeline","id","list","name","stocks","listsSchema","_id","type","default","userId","lists","timestamps","collection","statics","createUserLists","create","error","updateUserLists","updatedLists","findOneAndUpdate","getListsById","findOne","getListsByUserId","getAllLists","find","deleteListsById","deleteOne","deleteListsByUserId","getLists","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the stock Objects\nconst stockSchema = new mongoose.Schema(\n  {\n    symbol: String,\n    data: {\n      meta: mongoose.Schema.Types.Mixed,\n      values: [mongoose.Schema.Types.Mixed],\n      status: String,\n    },\n    percentChange: Number,\n    timeline: String,\n    id: String,\n  },\n);\n\n// Schema for the list Objects\nconst list = new mongoose.Schema(\n  {\n    id: String,\n    name: String,\n    stocks: [stockSchema],\n  },\n);\n\n// Schema for the user lists model\nconst listsSchema = new mongoose.Schema(\n  {\n    _id: {\n      type: String,\n      default: () => nanoid(),\n    },\n    userId: String,\n    lists: [list]\n  },\n  {\n    timestamps: true,\n    collection: \"lists\",\n  }\n);\n\n// Creates user lists\nlistsSchema.statics.createUserLists = async function (userId, lists) {\n  try {\n    // create the lists\n    return await this.create({ userId, lists });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Updates user favorite data\nlistsSchema.statics.updateUserLists = async function (userId, lists) {\n  try {\n    // updated the lists\n    const updatedLists = await this.findOneAndUpdate(userId, { lists: lists });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their id and return the found lists if they exist\nlistsSchema.statics.getListsById = async function (id) {\n  try {\n    const lists = await this.findOne({ _id: id });\n    if (!lists) throw ({ error: 'No lists with this id found' });\n    return lists;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get the lists by their userId and return the found lists if they exist\nlistsSchema.statics.getListsByUserId = async function (userId) {\n  try {\n    return this.findOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Get all user lists in the database and return them\nlistsSchema.statics.getAllLists = async function () {\n  try {\n    return await this.find();\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete lists with the given id and return the result\nlistsSchema.statics.deleteListsById = async function (id) {\n  try {\n    return await this.deleteOne({ _id: id });\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Delete the lists by their userId and return result\nlistsSchema.statics.deleteListsByUserId = async function (userId) {\n  try {\n    return await this.deleteOne({ userId: userId });\n  } catch (error) {\n    throw error;\n  }\n}\n\n\n// Get lists by their ids and return the found lists\nlistsSchema.statics.getLists = async function (ids) {\n  try {\n    const lists = await this.find({ _id: { $in: ids } });\n    if (!lists) throw ({ error: 'No lists with these ids were found' });\n    return users;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport default mongoose.model(\"Userlists\", listsSchema);\n"],"file":"UserLists.js"}