{"version":3,"sources":["../../server/models/UserLists.js"],"names":["stockSchema","mongoose","Schema","symbol","String","data","meta","Types","Mixed","values","status","percentChange","Number","timeline","id","list","name","stocks","listsSchema","_id","type","default","userId","lists","timestamps","collection","statics","createUserLists","create","error","updateUserLists","deleteOne","getListsById","findOne","getListsByUserId","getAllLists","find","deleteListsById","deleteListsByUserId","getLists","ids","$in","users","model"],"mappings":"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","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the stock Objects\nconst stockSchema = new mongoose.Schema(\n    {\n        symbol: String,\n        data: {\n            meta: mongoose.Schema.Types.Mixed,\n            values: [mongoose.Schema.Types.Mixed],\n            status: String,\n        },\n        percentChange: Number,\n        timeline: String,\n        id: String,\n    },\n);\n\n// Schema for the list Objects\nconst list = new mongoose.Schema(\n    {\n        id: String,\n        name: String,\n        stocks: [stockSchema],\n    },\n);\n\n// Schema for the user lists model\nconst listsSchema = new mongoose.Schema(\n    {\n        _id: {\n            type: String,\n            default: () => nanoid(),\n        },\n        userId: String,\n        lists: [list]\n    },\n    {\n        timestamps: true,\n        collection: \"lists\",\n    }\n);\n\n// Creates user lists\nlistsSchema.statics.createUserLists = async function (userId, lists) {\n    try {\n        // create the lists\n        return await this.create({ userId, lists });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Updates user favorite data\nlistsSchema.statics.updateUserLists = async function (userId, lists) {\n    try {\n        // delete the existing lists\n        await this.deleteOne({ userId: userId });\n        // create the updated lists\n        await this.create({ userId, lists });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the lists by their id and return the found lists if they exist\nlistsSchema.statics.getListsById = async function (id) {\n    try {\n        const lists = await this.findOne({ _id: id });\n        if (!lists) throw ({ error: 'No lists with this id found' });\n        return lists;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get the lists by their userId and return the found lists if they exist\nlistsSchema.statics.getListsByUserId = async function (userId) {\n    try {\n        return this.findOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get all user lists in the database and return them\nlistsSchema.statics.getAllLists = async function () {\n    try {\n        return await this.find();\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete lists with the given id and return the result\nlistsSchema.statics.deleteListsById = async function (id) {\n    try {\n        return await this.deleteOne({ _id: id });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete the lists by their userId and return result\nlistsSchema.statics.deleteListsByUserId = async function (userId) {\n    try {\n        return await this.deleteOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n\n// Get lists by their ids and return the found lists\nlistsSchema.statics.getLists = async function (ids) {\n    try {\n        const lists = await this.find({ _id: { $in: ids } });\n        if (!lists) throw ({ error: 'No lists with these ids were found' });\n        return users;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport default mongoose.model(\"Userlists\", listsSchema);\n"],"file":"UserLists.js"}