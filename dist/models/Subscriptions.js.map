{"version":3,"sources":["../../server/models/Subscriptions.js"],"names":["dataModel","mongoose","Schema","symbol","String","crossedLowerBand","Boolean","crossedUpperBand","Stoploss","Number","isBought","lastOBV","subscriptionSchema","_id","type","default","userId","symbols","timestamps","collection","statics","updateUserSubscriptions","updatedSymbols","findOneAndUpdate","error","getSubscriptionsByUserId","subscriptions","findOne","deleteSubscriptionByUserId","deleteOne","deleteAllSubscriptionsByUserId","createSubscription","create","getSubscriptions","find","model"],"mappings":";;;;;;;AACA;;AACA;;;;AAFA;AAIA;AACA,MAAMA,SAAS,GAAG,IAAIC,kBAASC,MAAb,CACd;AACI;AACAC,EAAAA,MAAM,EAAEC,MAFZ;AAGIC,EAAAA,gBAAgB,EAAEC,OAHtB;AAIIC,EAAAA,gBAAgB,EAAED,OAJtB;AAKIE,EAAAA,QAAQ,EAAEC,MALd;AAMI;AACAC,EAAAA,QAAQ,EAAEJ,OAPd;AAQI;AACAK,EAAAA,OAAO,EAAEF;AATb,CADc,CAAlB,C,CAcA;;AACA,MAAMG,kBAAkB,GAAG,IAAIX,kBAASC,MAAb,CACvB;AACIW,EAAAA,GAAG,EAAE;AACDC,IAAAA,IAAI,EAAEV,MADL;AAEDW,IAAAA,OAAO,EAAE,MAAM;AAFd,GADT;AAKIC,EAAAA,MAAM,EAAEZ,MALZ;AAMIa,EAAAA,OAAO,EAAE,CAACjB,SAAD,CANb,CAOI;;AAPJ,CADuB,EAUvB;AACIkB,EAAAA,UAAU,EAAE,IADhB;AAEIC,EAAAA,UAAU,EAAE;AAFhB,CAVuB,CAA3B,C,CAgBA;;AACAP,kBAAkB,CAACQ,OAAnB,CAA2BC,uBAA3B,GAAqD,gBAAgBL,MAAhB,EAAwBC,OAAxB,EAAiC;AAClF,MAAI;AACA;AACA,UAAMK,cAAc,GAAG,MAAM,KAAKC,gBAAL,CAAsBP,MAAtB,EAA8B;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAA9B,CAA7B;AACH,GAHD,CAGE,OAAOO,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAPD,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAZ,kBAAkB,CAACQ,OAAnB,CAA2BK,wBAA3B,GAAsD,gBAAgBT,MAAhB,EAAwB;AAC1E,MAAI;AACA,UAAMU,aAAa,GAAG,MAAM,KAAKC,OAAL,CAAa;AAAEX,MAAAA,MAAM,EAAEA;AAAV,KAAb,CAA5B;AACA,QAAI,CAACU,aAAL,EAAoB,MAAO;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAAP;AACpB,WAAOE,aAAP;AACH,GAJD,CAIE,OAAOF,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CARD,C,CAUA;;;AACAZ,kBAAkB,CAACQ,OAAnB,CAA2BQ,0BAA3B,GAAwD,gBAAgBZ,MAAhB,EAAwBC,OAAxB,EAAiC;AACrF,MAAI;AACA;AACA;AACA,WAAO,MAAM,KAAKY,SAAL,CAAe;AAAEb,MAAAA,MAAM,EAAEA,MAAV;AAAkBC,MAAAA,OAAO,EAAEA;AAA3B,KAAf,CAAb;AACH,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CARD,C,CAUA;;;AACAZ,kBAAkB,CAACQ,OAAnB,CAA2BU,8BAA3B,GAA4D,gBAAgBd,MAAhB,EAAwB;AAChF,MAAI;AACA,WAAO,MAAM,KAAKa,SAAL,CAAe;AAAEb,MAAAA,MAAM,EAAEA;AAAV,KAAf,CAAb;AACH,GAFD,CAEE,OAAOQ,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND,C,CAQA;;;AACAZ,kBAAkB,CAACQ,OAAnB,CAA2BW,kBAA3B,GAAgD,gBAAgBf,MAAhB,EAAwBC,OAAxB,EAAiC;AAC7E,MAAI;AACA;AACA,WAAO,MAAM,KAAKe,MAAL,CAAY;AAAEhB,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAZ,CAAb;AACH,GAHD,CAGE,OAAOO,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAPD,C,CASA;;;AACAZ,kBAAkB,CAACQ,OAAnB,CAA2Ba,gBAA3B,GAA8C,kBAAkB;AAC5D,MAAI;AACA,WAAO,MAAM,KAAKC,IAAL,EAAb;AACH,GAFD,CAEE,OAAOV,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAND;;eAQevB,kBAASkC,KAAT,CAAe,eAAf,EAAgCvB,kBAAhC,C","sourcesContent":["// imports\nimport mongoose from \"mongoose\";\nimport { nanoid } from \"nanoid\";\n\n// Schema for the subscription data model\nconst dataModel = new mongoose.Schema(\n    {\n        // Flags can work for telling if rsi is over 50 or under (or 70 and 30 depending on the strategy)\n        symbol: String,\n        crossedLowerBand: Boolean,\n        crossedUpperBand: Boolean,\n        Stoploss: Number,\n        // has the stock been bought?\n        isBought: Boolean,\n        // price of obv before to compare with current and determine if rising\n        lastOBV: Number,\n    }\n);\n\n// Schema for the subscription model\nconst subscriptionSchema = new mongoose.Schema(\n    {\n        _id: {\n            type: String,\n            default: () => nanoid(),\n        },\n        userId: String,\n        symbols: [dataModel],\n        //TODO add a name field to schema and to all other code including models, views, and components\n    },\n    {\n        timestamps: true,\n        collection: \"subscriptions\",\n    }\n);\n\n// Updates user subscription data\nsubscriptionSchema.statics.updateUserSubscriptions = async function (userId, symbols) {\n    try {\n        // updated the symbols\n        const updatedSymbols = await this.findOneAndUpdate(userId, { symbols: symbols });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// // Adds a user subscription data\n// subscriptionSchema.statics.updateUserSubscriptions = async function (userId, symbols) {\n//     try {\n//         // updated the symbols\n//         const updatedSymbols = await this.findOneAndUpdate(userId, { symbols: symbols });\n//     } catch (error) {\n//         throw error;\n//     }\n// }\n\n// Get the subscription by their userId and return the found subscriptions if they exist\nsubscriptionSchema.statics.getSubscriptionsByUserId = async function (userId) {\n    try {\n        const subscriptions = await this.findOne({ userId: userId });\n        if (!subscriptions) throw ({ error: 'No subscriptions with this userId found' });\n        return subscriptions;\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Delete a subscription with the given userId and return the result\nsubscriptionSchema.statics.deleteSubscriptionByUserId = async function (userId, symbols) {\n    try {\n        // TODO test because based on 2 fields\n        // TODO how to find the stock symbol in the array??????\n        return await this.deleteOne({ userId: userId, symbols: symbols });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Deletes all subscriptions with the given userId and return the result\nsubscriptionSchema.statics.deleteAllSubscriptionsByUserId = async function (userId) {\n    try {\n        return await this.deleteOne({ userId: userId });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Creates the stock list for autocomplete\nsubscriptionSchema.statics.createSubscription = async function (userId, symbols) {\n    try {\n        // create the names\n        return await this.create({ userId, symbols });\n    } catch (error) {\n        throw error;\n    }\n}\n\n// Get all users in the database and return them\nsubscriptionSchema.statics.getSubscriptions = async function () {\n    try {\n        return await this.find();\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport default mongoose.model(\"Subscriptions\", subscriptionSchema);\n"],"file":"Subscriptions.js"}