{"version":3,"sources":["../server/index.js"],"names":["dotenv","require","path","axios","default","corsDomains","process","env","CORS_DOMAINS","whitelist","split","map","d","trim","corsOptions","origin","credentials","app","port","PORT","set","use","express","json","limit","urlencoded","extended","userRouter","stockRouter","favoritesRouter","listsRouter","autocompleteRouter","subscriptionRouter","req","res","status","success","message","server","http","createServer","listen","on","console","log"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAhBA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiBG,OAA/B;;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4B,EAAhD;AACA,MAAMC,SAAS,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAhC,CAAlB;AAEA,MAAMC,WAAW,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAEN,SARQ;AAShBO,EAAAA,WAAW,EAAE;AATG,CAApB;AAYA,MAAMC,GAAG,GAAG,uBAAZ;AACA;;AACA,MAAMC,IAAI,GAAGZ,OAAO,CAACC,GAAR,CAAYY,IAAZ,IAAoB,MAAjC;AACAF,GAAG,CAACG,GAAJ,CAAQ,MAAR,EAAgBF,IAAhB;AAEAD,GAAG,CAACI,GAAJ,CAAQ,qBAAO,KAAP,CAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,iBAAQC,IAAR,CAAa;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAb,CAAR;AACAP,GAAG,CAACI,GAAJ,CAAQC,iBAAQG,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE,IAAZ;AAAkBF,EAAAA,KAAK,EAAE;AAAzB,CAAnB,CAAR;AACAP,GAAG,CAACI,GAAJ,CAAQ,mBAAKP,WAAL,CAAR,E,CAA4B;;AAE5BG,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBM,aAAlB;AACAV,GAAG,CAACI,GAAJ,CAAQ,SAAR,EAAmBO,eAAnB;AACAX,GAAG,CAACI,GAAJ,CAAQ,YAAR,EAAsBQ,kBAAtB;AACAZ,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBS,cAAlB;AACAb,GAAG,CAACI,GAAJ,CAAQ,eAAR,EAAyBU,qBAAzB;AACAd,GAAG,CAACI,GAAJ,CAAQ,gBAAR,EAA0BW,sBAA1B;AAEA;;AACAf,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,CAACY,GAAD,EAAMC,GAAN,KAAc;AACvB,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB;AACxBa,IAAAA,OAAO,EAAE,KADe;AAExBC,IAAAA,OAAO,EAAE;AAFe,GAArB,CAAP;AAIH,CALD;AAOA;;AACA,MAAMC,MAAM,GAAGC,cAAKC,YAAL,CAAkBvB,GAAlB,CAAf;AAEA;;;AACAqB,MAAM,CAACG,MAAP,CAAcvB,IAAd;AACA;;AACAoB,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuB,MAAM;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuC1B,IAAK,GAAzD;AACH,CAFD,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// imports\nconst dotenv = require('dotenv');\nconst path = require('path');\nconst axios = require('axios').default;\nimport http from \"http\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport cors from \"cors\";\n// mongo connection\nimport \"./config/mongo.js\";\n// routes\nimport userRouter from \"./routes/user.js\";\nimport stockRouter from \"./routes/stocks.js\";\nimport favoritesRouter from \"./routes/favorites.js\";\nimport listsRouter from \"./routes/lists.js\";\nimport autocompleteRouter from \"./routes/autocomplete.js\";\nimport subscriptionRouter from \"./routes/subscriptions.js\";\n\n// Redis configuration\n// const redis = require(\"redis\"),\n//   client = redis.createClient();/ // client middleware for redis\n// const { promisify } = require('util');\n// const getAsync = promisify(client.get).bind(client);\n\n//TODO add to package.json in development\n//npm run build && nodemon --exec babel-node ./server\n\n//TODO remove comment if using .env file\n// const envConfig = dotenv.config();\n// if (envConfig.error) {\n//   throw envConfig.error;\n// }\n\n// dotenv.config({\n//     path: path.resolve(__dirname, `${process.env.NODE_ENV}.env`)\n// });\n\n// console.log(\"cors domains\", process.env.CORS_DOMAINS);\n\nconst corsDomains = process.env.CORS_DOMAINS || \"\";\nconst whitelist = corsDomains.split(\",\").map(d => d.trim());\n\nconst corsOptions = {\n    // origin: function (origin, callback) {\n    //   if (!origin || whitelist.indexOf(origin) !== -1) {\n    //     callback(null, true);\n    //   } else {\n    //     callback(new Error(\"Not allowed by CORS\"));\n    //   }\n    // },\n    origin: whitelist,\n    credentials: true\n}\n\nconst app = express();\n/** Get port from environment and store in Express. */\nconst port = process.env.PORT || \"3000\";\napp.set(\"port\", port);\n\napp.use(logger(\"dev\"));\napp.use(express.json({ limit: \"100mb\" }));\napp.use(express.urlencoded({ extended: true, limit: \"100mb\" }));\napp.use(cors(corsOptions)); //{ origin: 'https://127.0.0.1:3000' }\n\napp.use(\"/users\", userRouter);\napp.use(\"/stocks\", stockRouter);\napp.use(\"/favorites\", favoritesRouter);\napp.use(\"/lists\", listsRouter);\napp.use(\"/autocomplete\", autocompleteRouter);\napp.use(\"/subscriptions\", subscriptionRouter);\n\n/** catch 404 and forward to error handler */\napp.use('*', (req, res) => {\n    return res.status(404).json({\n        success: false,\n        message: 'API endpoint doesnt exist'\n    })\n});\n\n/** Create HTTP server. */\nconst server = http.createServer(app);\n\n/** Listen on provided port, on all network interfaces. */\nserver.listen(port);\n/** Event listener for HTTP server \"listening\" event. */\nserver.on(\"listening\", () => {\n    console.log(`Listening on port:: http://localhost:${port}/`);\n});\n\n\n// async function getSubscriptions() {\n//     try {\n//         const GET_SUBSCRIPTIONS = process.env.GET_SUBSCRIPTIONS;\n//         const response = axios.request(GET_SUBSCRIPTIONS);\n//         console.log(\"response: \", response);\n//         // handle error\n//         if (response.data.status === \"error\") {\n//             console.log(response.data.message);\n//         } else {\n//             console.log(\"all subscriptions \", response.data);\n//             return response.data;\n//         }\n//         // handle error \n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n\n// async function callGet() {\n//     const subscriptions = await getSubscriptions();\n//     console.log(\"subscriptions \", subscriptions);\n//     return subscriptions;\n// }\n\n// const analyzeStock = require('./fetch/analyze-api');\n// const Cron = require('cron').CronJob;\n\n// let subscriptions = callGet();\n\n// console.log(\"jobs\", Cron.scheduledJobs);\n\n// for (job : Cron.scheduledJobs) {\n//     console.log(\"cron job\", job);\n//     //Cron.scheduledJobs[i].stop();\n// }\n\n// TODO get all subscriptions and run cron jobs for each one\n\n//analyzeStock(userId, symbol);\n// // sends request every minute\n// new Cron('* * * * *', analyzeStock, null, true, 'America/Los_Angeles');\n\n\n\n\n// Get the information from the api \n// app.get('/api/jobs', async (req, res) => {\n//   const jobs = await getAsync('github');\n//   res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n//   return res.send(jobs);\n// });\n"],"file":"index.js"}