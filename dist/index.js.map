{"version":3,"sources":["../server/index.js"],"names":["dotenv","require","envConfig","config","error","corsDomains","process","env","CORS_DOMAINS","whitelist","split","map","d","trim","corsOptions","origin","callback","indexOf","Error","credentials","console","log","app","port","PORT","set","use","express","json","urlencoded","extended","userRouter","stockRouter","favoritesRouter","listsRouter","req","res","status","success","message","server","http","createServer","listen","on"],"mappings":";;AAEA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAbA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAcA;AACA;AACA;AACA;AACA;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACG,MAAP,EAAlB;;AACA,IAAID,SAAS,CAACE,KAAd,EAAqB;AACnB,QAAMF,SAAS,CAACE,KAAhB;AACD;;AAED,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4B,EAAhD;AACA,MAAMC,SAAS,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAhC,CAAlB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,UAAUA,MAAV,EAAkBC,QAAlB,EAA4B;AAClC,QAAI,CAACD,MAAD,IAAWN,SAAS,CAACQ,OAAV,CAAkBF,MAAlB,MAA8B,CAAC,CAA9C,EAAiD;AAC/CC,MAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,qBAAV,CAAD,CAAR;AACD;AACF,GAPiB;AAQlBC,EAAAA,WAAW,EAAE;AARK,CAApB;AAWAC,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACAM,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AAEA,MAAMa,GAAG,GAAG,uBAAZ;AACA;;AACA,MAAMC,IAAI,GAAGjB,OAAO,CAACC,GAAR,CAAYiB,IAAZ,IAAoB,MAAjC;AACAF,GAAG,CAACG,GAAJ,CAAQ,MAAR,EAAgBF,IAAhB;AAEAD,GAAG,CAACI,GAAJ,CAAQ,qBAAO,KAAP,CAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAN,GAAG,CAACI,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAR,GAAG,CAACI,GAAJ,CAAQ,mBAAKZ,WAAL,CAAR,E,CAA4B;;AAE5BQ,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBK,aAAlB;AACAT,GAAG,CAACI,GAAJ,CAAQ,SAAR,EAAmBM,eAAnB;AACAV,GAAG,CAACI,GAAJ,CAAQ,YAAR,EAAsBO,kBAAtB;AACAX,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBQ,cAAlB;AAEA;;AACAZ,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,CAACS,GAAD,EAAMC,GAAN,KAAc;AACzB,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB;AAC1BU,IAAAA,OAAO,EAAE,KADiB;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAArB,CAAP;AAID,CALD,E,CAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,MAAMC,MAAM,GAAGC,cAAKC,YAAL,CAAkBpB,GAAlB,CAAf;AAEA;;;AACAkB,MAAM,CAACG,MAAP,CAAcpB,IAAd;AACA;;AACAiB,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuB,MAAM;AAC3BxB,EAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuCE,IAAK,GAAzD;AACD,CAFD,E,CAIA;AAEA;AACA;AACA","sourcesContent":["// imports\nconst dotenv = require('dotenv');\nimport http from \"http\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport cors from \"cors\";\n// mongo connection\nimport \"./config/mongo.js\";\n// routes\nimport indexRouter from \"./routes/index.js\";\nimport userRouter from \"./routes/user.js\";\nimport stockRouter from \"./routes/stocks.js\";\nimport favoritesRouter from \"./routes/favorites.js\";\nimport listsRouter from \"./routes/lists.js\";\n\n// Redis configuration\n// const redis = require(\"redis\"),\n//   client = redis.createClient();/ // client middleware for redis\n// const { promisify } = require('util');\n// const getAsync = promisify(client.get).bind(client);\n\nconst envConfig = dotenv.config();\nif (envConfig.error) {\n  throw envConfig.error;\n}\n\nconst corsDomains = process.env.CORS_DOMAINS || \"\";\nconst whitelist = corsDomains.split(\",\").map(d => d.trim());\n\nconst corsOptions = {\n  origin: function (origin, callback) {\n    if (!origin || whitelist.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error(\"Not allowed by CORS\"));\n    }\n  },\n  credentials: true\n}\n\nconsole.log(corsOptions);\nconsole.log(whitelist);\n\nconst app = express();\n/** Get port from environment and store in Express. */\nconst port = process.env.PORT || \"3000\";\napp.set(\"port\", port);\n\napp.use(logger(\"dev\"));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cors(corsOptions)); //{ origin: 'https://127.0.0.1:3000' }\n\napp.use(\"/users\", userRouter);\napp.use(\"/stocks\", stockRouter);\napp.use(\"/favorites\", favoritesRouter);\napp.use(\"/lists\", listsRouter);\n\n/** catch 404 and forward to error handler */\napp.use('*', (req, res) => {\n  return res.status(404).json({\n    success: false,\n    message: 'API endpoint doesnt exist'\n  })\n});\n\n// Get the information from the api \n// app.get('/api/jobs', async (req, res) => {\n//   const jobs = await getAsync('github');\n//   res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n//   return res.send(jobs);\n// });\n\n/** Create HTTP server. */\nconst server = http.createServer(app);\n\n/** Listen on provided port, on all network interfaces. */\nserver.listen(port);\n/** Event listener for HTTP server \"listening\" event. */\nserver.on(\"listening\", () => {\n  console.log(`Listening on port:: http://localhost:${port}/`);\n});\n\n// const fetchGithub = require('./fetch/fetch-github')\n\n// const Cron = require('cron').CronJob;\n// // sends request every minute\n// new Cron('* * * * *', fetchGithub, null, true, 'America/Los_Angeles');\n"],"file":"index.js"}