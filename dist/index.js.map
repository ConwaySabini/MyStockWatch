{"version":3,"sources":["../server/index.js"],"names":["require","config","path","CONNECTION_URL","process","env","MONGODB_CONNECTION","corsDomains","CORS_DOMAINS","whitelist","split","map","d","trim","corsOptions","origin","credentials","app","port","PORT","set","use","express","json","limit","urlencoded","extended","userRouter","stockRouter","favoritesRouter","listsRouter","autocompleteRouter","subscriptionRouter","req","res","status","success","message","server","http","createServer","connectDB","conn","mongoose","connect","useNewUrlParser","useUnifiedTopology","console","log","connection","host","error","exit","then","listen","on","disconnect"],"mappings":"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","sourcesContent":["// imports\nrequire('dotenv').config();\nconst path = require('path');\nimport cors from 'cors';\nimport express from 'express';\nimport http from 'http';\nimport mongoose from 'mongoose';\nimport logger from 'morgan';\nimport autocompleteRouter from './routes/autocomplete.js';\nimport favoritesRouter from './routes/favorites.js';\nimport listsRouter from './routes/lists.js';\nimport stockRouter from './routes/stocks.js';\nimport subscriptionRouter from './routes/subscriptions.js';\n// mongo connection\n//import \"./config/mongo.js\";\n// routes\nimport userRouter from './routes/user.js';\nconst CONNECTION_URL = process.env.MONGODB_CONNECTION;\n// Redis configuration\n// const redis = require(\"redis\"),\n//   client = redis.createClient();/ // client middleware for redis\n// const { promisify } = require('util');\n// const getAsync = promisify(client.get).bind(client);\n\n//TODO add to package.json in development\n//npm run build && nodemon --exec babel-node ./server\n\n//TODO remove comment in developent\n// const envConfig = dotenv.config();\n// if (envConfig.error) {\n//   throw envConfig.error;\n// }\n\n// dotenv.config({\n//     path: path.resolve(__dirname, `${process.env.NODE_ENV}.env`)\n// });\n\n// console.log(\"cors domains\", process.env.CORS_DOMAINS);\n\nconst corsDomains = process.env.CORS_DOMAINS || '';\nconst whitelist = corsDomains.split(',').map((d) => d.trim());\n\nconst corsOptions = {\n  // origin: function (origin, callback) {\n  //   if (!origin || whitelist.indexOf(origin) !== -1) {\n  //     callback(null, true);\n  //   } else {\n  //     callback(new Error(\"Not allowed by CORS\"));\n  //   }\n  // },\n  origin: whitelist,\n  credentials: true,\n};\n\nconst app = express();\n/** Get port from environment and store in Express. */\nconst port = process.env.PORT || '3000';\napp.set('port', port);\n\napp.use(logger('dev'));\napp.use(express.json({ limit: '100mb' }));\napp.use(express.urlencoded({ extended: true, limit: '100mb' }));\napp.use(cors(corsOptions)); //{ origin: 'https://127.0.0.1:3000' }\n\napp.use('/users', userRouter);\napp.use('/stocks', stockRouter);\napp.use('/favorites', favoritesRouter);\napp.use('/lists', listsRouter);\napp.use('/autocomplete', autocompleteRouter);\napp.use('/subscriptions', subscriptionRouter);\n\n/** catch 404 and forward to error handler */\napp.use('*', (req, res) => {\n  return res.status(404).json({\n    success: false,\n    message: 'API endpoint doesnt exist',\n  });\n});\n\n/** Create HTTP server. */\nconst server = http.createServer(app);\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(CONNECTION_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.log(error);\n    process.exit(1);\n  }\n};\n\n//Connect to the database before listening\nconnectDB().then(() => {\n  /** Listen on provided port, on all network interfaces. */\n  server.listen(port);\n  /** Event listener for HTTP server \"listening\" event. */\n  server.on('listening', () => {\n    console.log(`Listening on port:: http://localhost:${port}/`);\n  });\n\n  mongoose.connection.on('connected', () => {\n    console.log('Mongo is connected');\n  });\n  mongoose.connection.on('reconnected', () => {\n    console.log('Mongo is reconnected');\n  });\n  mongoose.connection.on('error', (error) => {\n    console.log('Error on mongo connection', error);\n    mongoose.disconnect();\n  });\n  mongoose.connection.on('disconnected', () => {\n    console.log('Mongo is disconnected');\n  });\n});\n\n// async function getSubscriptions() {\n//     try {\n//         const GET_SUBSCRIPTIONS = process.env.GET_SUBSCRIPTIONS;\n//         const response = axios.request(GET_SUBSCRIPTIONS);\n//         console.log(\"response: \", response);\n//         // handle error\n//         if (response.data.status === \"error\") {\n//             console.log(response.data.message);\n//         } else {\n//             console.log(\"all subscriptions \", response.data);\n//             return response.data;\n//         }\n//         // handle error\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n\n// async function callGet() {\n//     const subscriptions = await getSubscriptions();\n//     console.log(\"subscriptions \", subscriptions);\n//     return subscriptions;\n// }\n\n// const analyzeStock = require('./fetch/analyze-api');\n// const Cron = require('cron').CronJob;\n\n// let subscriptions = callGet();\n\n// console.log(\"jobs\", Cron.scheduledJobs);\n\n// for (job : Cron.scheduledJobs) {\n//     console.log(\"cron job\", job);\n//     //Cron.scheduledJobs[i].stop();\n// }\n\n// TODO get all subscriptions and run cron jobs for each one\n\n//analyzeStock(userId, symbol);\n// // sends request every minute\n// new Cron('* * * * *', analyzeStock, null, true, 'America/Los_Angeles');\n"],"file":"index.js"}