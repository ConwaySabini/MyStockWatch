{"version":3,"sources":["../server/index.js"],"names":["dotenv","require","envConfig","config","error","app","port","process","env","PORT","set","use","express","json","urlencoded","extended","origin","indexRouter","userRouter","req","res","status","success","message","server","http","createServer","listen","on","console","log"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AAEA;;AAGA;;AACA;;;;AAVA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAYA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACG,MAAP,EAAlB;;AACA,IAAID,SAAS,CAACE,KAAd,EAAqB;AACnB,QAAMF,SAAS,CAACE,KAAhB;AACD,C,CACD;;;AAGA,MAAMC,GAAG,GAAG,uBAAZ;AACA;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAAjC;AACAJ,GAAG,CAACK,GAAJ,CAAQ,MAAR,EAAgBJ,IAAhB;AAIAD,GAAG,CAACM,GAAJ,CAAQ,qBAAO,KAAP,CAAR;AACAN,GAAG,CAACM,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAR,GAAG,CAACM,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAV,GAAG,CAACM,GAAJ,CAAQ,mBAAK;AAAEK,EAAAA,MAAM,EAAE;AAAV,CAAL,CAAR;AAEAX,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAaM,cAAb;AACAZ,GAAG,CAACM,GAAJ,CAAQ,QAAR,EAAkBO,aAAlB;AAEA;;AACAb,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa,CAACQ,GAAD,EAAMC,GAAN,KAAc;AACzB,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AAC1BS,IAAAA,OAAO,EAAE,KADiB;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAArB,CAAP;AAID,CALD,E,CAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,MAAMC,MAAM,GAAGC,cAAKC,YAAL,CAAkBrB,GAAlB,CAAf;AAEA;;;AACAmB,MAAM,CAACG,MAAP,CAAcrB,IAAd;AACA;;AACAkB,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuB,MAAM;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuCxB,IAAK,GAAzD;AACD,CAFD,E,CAOA;AAEA;AACA;AACA","sourcesContent":["const dotenv = require('dotenv');\nimport http from \"http\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport cors from \"cors\";\n// mongo connection\nimport \"./config/mongo.js\";\n// socket configuration\n// routes\nimport indexRouter from \"./routes/index.js\";\nimport userRouter from \"./routes/user.js\";\n\n// Redis configuration\n// const redis = require(\"redis\"),\n//   client = redis.createClient();\n\n// // client middleware for redis\n// const { promisify } = require('util');\n// const getAsync = promisify(client.get).bind(client);\n\nconst envConfig = dotenv.config();\nif (envConfig.error) {\n  throw envConfig.error;\n}\n//console.log(envConfig.parsed);\n\n\nconst app = express();\n/** Get port from environment and store in Express. */\nconst port = process.env.PORT || \"3000\";\napp.set(\"port\", port);\n\n\n\napp.use(logger(\"dev\"));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cors({ origin: 'https://localhost:3001' }));\n\napp.use(\"/\", indexRouter);\napp.use(\"/users\", userRouter);\n\n/** catch 404 and forward to error handler */\napp.use('*', (req, res) => {\n  return res.status(404).json({\n    success: false,\n    message: 'API endpoint doesnt exist'\n  })\n});\n\n// Get the information from the api \n// app.get('/api/jobs', async (req, res) => {\n//   const jobs = await getAsync('github');\n//   res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n//   return res.send(jobs);\n// });\n\n/** Create HTTP server. */\nconst server = http.createServer(app);\n\n/** Listen on provided port, on all network interfaces. */\nserver.listen(port);\n/** Event listener for HTTP server \"listening\" event. */\nserver.on(\"listening\", () => {\n  console.log(`Listening on port:: http://localhost:${port}/`);\n});\n\n\n\n\n// const fetchGithub = require('./fetch/fetch-github')\n\n// const Cron = require('cron').CronJob;\n// // sends request every minute\n// new Cron('* * * * *', fetchGithub, null, true, 'America/Los_Angeles');\n"],"file":"index.js"}