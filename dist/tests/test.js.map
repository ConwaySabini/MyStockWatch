{"version":3,"sources":["../../server/tests/test.js"],"names":["assert","require","chai","expect","sinon","indexPage","user","addUser","name","describe","it","isLoggedIn","isLoggedInStub","stub","returns","req","res","send","mock","expects","once","withExactArgs","getIndexPage","calledOnce","to","be","true","verify","spy","firstCall","args","equal","console","log"],"mappings":"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","sourcesContent":["// imports\nconst assert = require(\"assert\");\nconst chai = require(\"chai\");\nconst expect = chai.expect;\nconst sinon = require(\"sinon\");\n// import our getIndexPage function\nconst indexPage = require(\"../../controllers/app.controller.js\");\n\nconst user = {\n  addUser: (name) => {\n    this.name = name;\n  }\n}\n\ndescribe(\"AppController\", function () {\n  describe(\"getIndexPage\", function () {\n    it(\"should send hey when user is logged in\", function () {\n      // instantiate a user object with an empty isLoggedIn function\n      let user = {\n        isLoggedIn: function () { }\n      }\n\n      // Stub isLoggedIn function and make it return true always\n      const isLoggedInStub = sinon.stub(user, \"isLoggedIn\").returns(true);\n\n      // pass user into the req object\n      let req = {\n        user: user\n      }\n      // Have `res` have a send key with a function value coz we use `res.send()` in our func\n      let res = {\n        send: function () { }\n      }\n\n      // mock res\n      const mock = sinon.mock(res);\n      // build how we expect it t work\n      mock.expects(\"send\").once().withExactArgs(\"Hey\");\n\n      indexPage.getIndexPage(req, res);\n      expect(isLoggedInStub.calledOnce).to.be.true;\n\n      // verify that mock works as expected\n      mock.verify();\n    });\n\n    it(\"should send something else when user is NOT logged in\", function () {\n      // instantiate a user object with an empty isLoggedIn function\n      let user = {\n        isLoggedIn: function () { }\n      }\n\n      // Stub isLoggedIn function and make it return false always\n      const isLoggedInStub = sinon.stub(user, \"isLoggedIn\").returns(false);\n\n      // pass user into the req object\n      let req = {\n        user: user\n      }\n\n      // Have `res` have a send key with a function value coz we use `res.send()` in our func\n      let res = {\n        // replace empty function with a spy\n        send: sinon.spy()\n      }\n\n      indexPage.getIndexPage(req, res);\n      // let's see what we get on res.send\n      // console.log(res.send);\n      // `res.send` called once\n      expect(res.send.calledOnce).to.be.true;\n      expect(res.send.firstCall.args[0]).to.equal(\"Ooops. You need to log in to access this page\");\n\n      // assert that the stub is logged in at least once\n      expect(isLoggedInStub.calledOnce).to.be.true;\n    });\n  });\n});\n\n\ndescribe(\"User\", function () {\n  describe(\"addUser\", function () {\n    it(\"should add a user\", function () {\n      sinon.spy(user, \"addUser\");\n      user.addUser('John Doe');\n\n      // lets log `addUser` and see what we get\n      console.log(user.addUser);\n      expect(user.addUser.calledOnce).to.be.true;\n    });\n  });\n});\n\ndescribe(\"smoke test\", function () {\n  it(\"checks equality\", function () {\n    expect(true).to.be.true;\n  });\n});\n"],"file":"test.js"}